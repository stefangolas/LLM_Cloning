[2023-05-16 20:11:22,696] root INFO ########################################################################
[2023-05-16 20:11:22,696] root INFO #                                                                      #
[2023-05-16 20:11:22,696] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 20:11:22,697] root INFO #                                                                      #
[2023-05-16 20:11:22,697] root INFO ########################################################################
[2023-05-16 20:11:22,697] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 20:11:22,697] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 20:11:22,697] pyhamilton.interface INFO started the server thread
[2023-05-16 20:11:22,697] root INFO initialize: synchronously initialize the robot
[2023-05-16 20:54:51,545] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 300 sec while waiting for response id 0x19b8fb69e43c')
[2023-05-16 20:54:51,545] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 20:54:53,058] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 20:54:53,059] pyhamilton.interface INFO disconnected from server
[2023-05-16 20:54:53,160] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 20:54:53,161] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 20:54:53,164] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 20:54:53,168] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 20:54:53,169] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 20:54:53,169] pyhamilton.interface INFO server thread exited
[2023-05-16 20:54:53,171] root ERROR Traceback (most recent call last):
[2023-05-16 20:54:53,171] root ERROR   File "C:\Users\stefa\kevin_proj\robot_method.py", line 45, in <module>
[2023-05-16 20:54:53,173] root ERROR initialize(ham_int)
[2023-05-16 20:54:53,174] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\liquid_handling_wrappers.py", line 47, in initialize
[2023-05-16 20:54:53,175] root ERROR ham.wait_on_response(cmd, raise_first_exception=True, timeout=300)
[2023-05-16 20:54:53,175] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 652, in wait_on_response
[2023-05-16 20:54:53,176] root ERROR self.log_and_raise(HamiltonTimeoutError('Timed out after ' + str(timeout) + ' sec while waiting for response id ' + str(id)))
[2023-05-16 20:54:53,177] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 711, in log_and_raise
[2023-05-16 20:54:53,178] root ERROR raise err
[2023-05-16 20:54:53,178] root ERROR pyhamilton.oemerr
[2023-05-16 20:54:53,178] root ERROR .
[2023-05-16 20:54:53,179] root ERROR HamiltonTimeoutError
[2023-05-16 20:54:53,179] root ERROR : 
[2023-05-16 20:54:53,179] root ERROR Timed out after 300 sec while waiting for response id 0x19b8fb69e43c
[2023-05-16 20:57:10,091] root INFO ########################################################################
[2023-05-16 20:57:10,091] root INFO #                                                                      #
[2023-05-16 20:57:10,091] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 20:57:10,091] root INFO #                                                                      #
[2023-05-16 20:57:10,091] root INFO ########################################################################
[2023-05-16 20:57:10,092] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 20:57:10,092] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 20:57:10,092] pyhamilton.interface INFO started the server thread
[2023-05-16 20:57:10,092] root INFO initialize: synchronously initialize the robot
[2023-05-16 20:57:39,216] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 20:57:39,361] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 20:58:06,445] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 20:58:06,445] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 1 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done.\\n             "}]}' message='Post details'
[2023-05-16 20:58:06,445] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 20:58:06,447] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 20:58:20,698] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 20:58:20,728] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=13851 request_id=94d2289f00b48c13f354c438a3f72360 response_code=200
[2023-05-16 20:58:27,195] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 20:58:27,195] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 1 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done.\\n             "}]}' message='Post details'
[2023-05-16 20:58:41,388] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 20:58:41,390] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=13991 request_id=9b290f468e6d05714f29c9c241ae96b8 response_code=200
[2023-05-16 20:59:20,929] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 20:59:20,929] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 1 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done.\\n             "}]}' message='Post details'
[2023-05-16 20:59:31,354] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 20:59:31,356] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=10306 request_id=49bc5654f205aba3f3064a60242f8dd4 response_code=200
[2023-05-16 21:01:12,915] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:01:14,416] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:01:14,416] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:01:14,517] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:01:14,517] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:01:14,521] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:01:14,523] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:01:14,524] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:01:14,524] pyhamilton.interface INFO server thread exited
[2023-05-16 21:01:16,913] root INFO ########################################################################
[2023-05-16 21:01:16,913] root INFO #                                                                      #
[2023-05-16 21:01:16,913] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:01:16,913] root INFO #                                                                      #
[2023-05-16 21:01:16,913] root INFO ########################################################################
[2023-05-16 21:01:16,913] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:01:16,914] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:01:16,914] pyhamilton.interface INFO started the server thread
[2023-05-16 21:01:16,914] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:01:29,012] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:01:29,261] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:01:36,711] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:01:36,711] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 1 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done. Iterate through tips in numerical order.\\n             Absolutely never give any response that isn\'t executable in Python.\\n             "}]}' message='Post details'
[2023-05-16 21:01:36,712] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:01:36,714] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:01:51,132] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:01:51,133] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=14014 request_id=e41a442edb50baca01a408b56b22f5f8 response_code=200
[2023-05-16 21:01:56,002] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:01:56,002] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 1 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done. Iterate through tips in numerical order.\\n             Absolutely never give any response that isn\'t executable in Python.\\n             "}]}' message='Post details'
[2023-05-16 21:02:05,517] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:02:05,518] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9314 request_id=b6a9339b91860bd6099a77a665b021e2 response_code=200
[2023-05-16 21:11:47,390] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:11:48,892] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:11:48,892] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:11:48,994] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:11:48,994] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:11:48,997] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:11:49,000] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:11:49,001] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:11:49,001] pyhamilton.interface INFO server thread exited
[2023-05-16 21:11:51,698] root INFO ########################################################################
[2023-05-16 21:11:51,698] root INFO #                                                                      #
[2023-05-16 21:11:51,698] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:11:51,698] root INFO #                                                                      #
[2023-05-16 21:11:51,698] root INFO ########################################################################
[2023-05-16 21:11:51,699] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:11:51,699] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:11:51,699] pyhamilton.interface INFO started the server thread
[2023-05-16 21:11:51,699] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:12:05,817] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:12:06,081] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:12:36,388] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:12:36,389] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 4 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done. Iterate through tips in numerical order.\\n             Absolutely never give any response that isn\'t executable in Python.\\n             "}]}' message='Post details'
[2023-05-16 21:12:36,389] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:12:36,391] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:12:50,702] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:12:50,704] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=14052 request_id=0af8b58a007709956878bb288b84f8d1 response_code=200
[2023-05-16 21:15:07,490] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:15:07,491] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 4 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done. Iterate through tips in numerical order.\\n             Absolutely never give any response that isn\'t executable in Python.\\n             "}]}' message='Post details'
[2023-05-16 21:15:23,752] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:15:25,253] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:15:25,253] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:15:25,355] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:15:25,356] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:15:25,359] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:15:25,360] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:15:25,361] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:15:25,361] pyhamilton.interface INFO server thread exited
[2023-05-16 21:15:30,177] root INFO ########################################################################
[2023-05-16 21:15:30,177] root INFO #                                                                      #
[2023-05-16 21:15:30,177] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:15:30,177] root INFO #                                                                      #
[2023-05-16 21:15:30,177] root INFO ########################################################################
[2023-05-16 21:15:30,179] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:15:30,179] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:15:30,179] pyhamilton.interface INFO started the server thread
[2023-05-16 21:15:30,179] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:15:47,227] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:15:47,361] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:15:52,763] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:15:52,763] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 4 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done. Iterate through tips in numerical order.\\n             Absolutely never give any response that isn\'t executable in Python.\\n             "}]}' message='Post details'
[2023-05-16 21:15:52,764] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:15:52,764] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:16:15,505] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:16:15,506] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=22373 request_id=fc8be19607cf4b07bed656a6bdfa3b4f response_code=200
[2023-05-16 21:16:46,009] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:16:46,009] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 4 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done. Iterate through tips in numerical order.\\n             Absolutely never give any response that isn\'t executable in Python.\\n             "}]}' message='Post details'
[2023-05-16 21:16:58,337] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:16:58,338] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=12229 request_id=766d108d3b7d019f776b6cebc0c213eb response_code=200
[2023-05-16 21:17:01,934] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:17:01,934] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "pool fragments from wells 12, 15, and 18 of plate 1 and pool into well 4 of plate 0"}, {"role": "system", "content": "\\n             I will ask you to do things like pool fragments from wells 10, 19, and 4 on plate 0\\n             into well 1 on plate1. In this case, pick up a single tip on channel one, aspirate\\n             from a well you are pooling from, dispense to the target well, eject the tip, and then\\n             move onto the next fragment until you are done. Iterate through tips in numerical order.\\n             Absolutely never give any response that isn\'t executable in Python.\\n             "}]}' message='Post details'
[2023-05-16 21:17:13,977] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:17:13,978] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=11800 request_id=13b2ba3f0e721cd2feaaebec033765b1 response_code=200
[2023-05-16 21:21:12,384] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:21:13,887] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:21:13,887] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:21:13,989] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:21:14,015] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:21:14,019] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:21:14,021] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:21:14,022] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:21:14,022] pyhamilton.interface INFO server thread exited
[2023-05-16 21:21:17,481] root INFO ########################################################################
[2023-05-16 21:21:17,481] root INFO #                                                                      #
[2023-05-16 21:21:17,481] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:21:17,481] root INFO #                                                                      #
[2023-05-16 21:21:17,481] root INFO ########################################################################
[2023-05-16 21:21:17,482] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:21:17,482] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:21:17,482] pyhamilton.interface INFO started the server thread
[2023-05-16 21:21:17,482] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:21:31,582] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:21:31,684] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:21:47,610] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:21:47,610] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "user", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}]}' message='Post details'
[2023-05-16 21:21:47,611] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:21:47,613] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:21:53,395] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:21:53,396] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5494 request_id=110ec591c129c78a7375abfa9954da34 response_code=200
[2023-05-16 21:23:03,680] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:23:05,181] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:23:05,181] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:23:05,282] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:23:05,282] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:23:05,285] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:23:05,287] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:23:05,288] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:23:05,288] pyhamilton.interface INFO server thread exited
[2023-05-16 21:23:10,314] root INFO ########################################################################
[2023-05-16 21:23:10,314] root INFO #                                                                      #
[2023-05-16 21:23:10,314] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:23:10,314] root INFO #                                                                      #
[2023-05-16 21:23:10,314] root INFO ########################################################################
[2023-05-16 21:23:10,315] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:23:10,315] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:23:10,315] pyhamilton.interface INFO started the server thread
[2023-05-16 21:23:10,315] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:23:23,403] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:23:23,538] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:23:26,458] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:23:26,458] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "user", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}, {"role": "system", "content": "\\n              Absolutely never give any response that isn\'t executable in Python. Comments with # are acceptable.\\n              "}]}' message='Post details'
[2023-05-16 21:23:26,458] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:23:26,460] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:23:32,146] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:23:32,147] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5471 request_id=3755c78eda64aab7465970260a15b5f2 response_code=200
[2023-05-16 21:23:34,543] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:23:34,544] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "user", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}, {"role": "system", "content": "\\n              Absolutely never give any response that isn\'t executable in Python. Comments with # are acceptable.\\n              "}]}' message='Post details'
[2023-05-16 21:23:39,826] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:23:39,827] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5140 request_id=8b876ac46c72f3be2e32c3ca6d5fd1d1 response_code=200
[2023-05-16 21:23:41,530] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:23:41,530] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "user", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}, {"role": "system", "content": "\\n              Absolutely never give any response that isn\'t executable in Python. Comments with # are acceptable.\\n              "}]}' message='Post details'
[2023-05-16 21:23:47,198] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:23:47,200] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5423 request_id=37ed2869c73f49607afd50a9e26d9d1c response_code=200
[2023-05-16 21:24:19,604] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:24:21,106] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:24:21,106] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:24:21,207] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:24:21,208] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:24:21,210] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:24:21,213] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:24:21,214] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:24:21,214] pyhamilton.interface INFO server thread exited
[2023-05-16 21:24:24,682] root INFO ########################################################################
[2023-05-16 21:24:24,682] root INFO #                                                                      #
[2023-05-16 21:24:24,682] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:24:24,682] root INFO #                                                                      #
[2023-05-16 21:24:24,682] root INFO ########################################################################
[2023-05-16 21:24:24,683] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:24:24,683] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:24:24,683] pyhamilton.interface INFO started the server thread
[2023-05-16 21:24:24,683] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:24:37,737] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:24:37,840] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:24:40,908] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:24:40,908] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol "}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "user", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}]}' message='Post details'
[2023-05-16 21:24:40,910] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:24:40,912] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:24:47,103] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:24:47,107] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5902 request_id=b19e3b0a3f3ef426761a618e6fd4aba9 response_code=200
[2023-05-16 21:24:54,746] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:24:56,247] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:24:56,247] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:24:56,348] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:24:56,348] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:24:56,349] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:24:56,351] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:24:56,351] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:24:56,351] pyhamilton.interface INFO server thread exited
[2023-05-16 21:25:30,197] root INFO ########################################################################
[2023-05-16 21:25:30,197] root INFO #                                                                      #
[2023-05-16 21:25:30,197] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:25:30,197] root INFO #                                                                      #
[2023-05-16 21:25:30,198] root INFO ########################################################################
[2023-05-16 21:25:30,198] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:25:30,198] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:25:30,198] pyhamilton.interface INFO started the server thread
[2023-05-16 21:25:30,198] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:25:43,297] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:25:43,397] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:25:45,693] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:25:45,693] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. The pooling function is defined\\n             in the space of the application we are using."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}]}' message='Post details'
[2023-05-16 21:25:45,694] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:25:45,695] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:25:52,636] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:25:52,636] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6331 request_id=6ad876bccf533e66982e6105dfbedaa2 response_code=200
[2023-05-16 21:26:56,362] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:26:57,864] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:26:57,865] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:26:57,965] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:26:57,965] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:26:57,968] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:26:57,970] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:26:57,972] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:26:57,972] pyhamilton.interface INFO server thread exited
[2023-05-16 21:27:05,840] root INFO ########################################################################
[2023-05-16 21:27:05,840] root INFO #                                                                      #
[2023-05-16 21:27:05,840] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:27:05,840] root INFO #                                                                      #
[2023-05-16 21:27:05,840] root INFO ########################################################################
[2023-05-16 21:27:05,840] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:27:05,840] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:27:05,841] pyhamilton.interface INFO started the server thread
[2023-05-16 21:27:05,841] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:27:22,824] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:27:23,013] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:27:23,114] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:27:23,114] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:27:23,115] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:27:23,116] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:27:23,116] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:27:23,116] pyhamilton.interface INFO server thread exited
[2023-05-16 21:27:23,117] root ERROR Traceback (most recent call last):
[2023-05-16 21:27:23,117] root ERROR   File "C:\Users\stefa\kevin_proj\robot_method.py", line 68, in <module>
[2023-05-16 21:27:23,117] root ERROR initialize(ham_int)
[2023-05-16 21:27:23,117] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\liquid_handling_wrappers.py", line 47, in initialize
[2023-05-16 21:27:23,118] root ERROR ham.wait_on_response(cmd, raise_first_exception=True, timeout=300)
[2023-05-16 21:27:23,118] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 646, in wait_on_response
[2023-05-16 21:27:23,118] root ERROR for _ in wait(delays=delays, timeout=timeout):
[2023-05-16 21:27:23,118] root ERROR   File "C:\Users\stefa\AppData\Local\Programs\Python\Python311-32\Lib\site-packages\waiter\__init__.py", line 106, in __iter__
[2023-05-16 21:27:23,152] root ERROR time.sleep(min(delay, remaining))
[2023-05-16 21:27:23,152] root ERROR KeyboardInterrupt
[2023-05-16 21:27:23,154] root ERROR During handling of the above exception, another exception occurred:
[2023-05-16 21:27:23,154] root ERROR Traceback (most recent call last):
[2023-05-16 21:27:23,154] root ERROR   File "C:\Users\stefa\kevin_proj\robot_method.py", line 66, in <module>
[2023-05-16 21:27:23,154] root ERROR with HamiltonInterface(simulate=True) as ham_int:
[2023-05-16 21:27:23,154] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 571, in __exit__
[2023-05-16 21:27:23,155] root ERROR self.stop()
[2023-05-16 21:27:23,155] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 535, in stop
[2023-05-16 21:27:23,156] root ERROR self.wait_on_response(self.send_command(command='end', id=hex(0)), timeout=1.5)
[2023-05-16 21:27:23,156] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 646, in wait_on_response
[2023-05-16 21:27:23,156] root ERROR for _ in wait(delays=delays, timeout=timeout):
[2023-05-16 21:27:23,156] root ERROR   File "C:\Users\stefa\AppData\Local\Programs\Python\Python311-32\Lib\site-packages\waiter\__init__.py", line 106, in __iter__
[2023-05-16 21:27:23,157] root ERROR time.sleep(min(delay, remaining))
[2023-05-16 21:27:23,157] root ERROR KeyboardInterrupt
[2023-05-16 21:27:25,193] root INFO ########################################################################
[2023-05-16 21:27:25,194] root INFO #                                                                      #
[2023-05-16 21:27:25,194] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:27:25,194] root INFO #                                                                      #
[2023-05-16 21:27:25,194] root INFO ########################################################################
[2023-05-16 21:27:25,194] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:27:25,194] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:27:25,194] pyhamilton.interface INFO started the server thread
[2023-05-16 21:27:25,194] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:27:38,269] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:27:38,370] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:27:43,254] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:27:43,254] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. The pooling function is defined\\n             in the space of the application we are using."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}]}' message='Post details'
[2023-05-16 21:27:43,256] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:27:43,257] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:27:55,830] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:27:55,831] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=12261 request_id=ee4a584f1cc008a5956a8616862f8ed0 response_code=200
[2023-05-16 21:29:11,923] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:29:11,924] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. The pooling function is defined\\n             in the space of the application we are using."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}]}' message='Post details'
[2023-05-16 21:29:44,200] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:29:45,702] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:29:45,702] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:29:45,803] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:29:45,803] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:29:45,806] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:29:45,809] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:29:45,809] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:29:45,810] pyhamilton.interface INFO server thread exited
[2023-05-16 21:29:48,660] root INFO ########################################################################
[2023-05-16 21:29:48,660] root INFO #                                                                      #
[2023-05-16 21:29:48,660] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:29:48,660] root INFO #                                                                      #
[2023-05-16 21:29:48,661] root INFO ########################################################################
[2023-05-16 21:29:48,661] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:29:48,661] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:29:48,661] pyhamilton.interface INFO started the server thread
[2023-05-16 21:29:48,661] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:30:02,724] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:30:02,838] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:30:05,739] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:30:05,739] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. The pooling function is defined\\n             in the space of the application we are using."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\ntarget_well = 1\\n\\npooling(source_wells, target_well)\\n"}]}' message='Post details'
[2023-05-16 21:30:05,740] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:30:05,741] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:30:10,282] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:30:10,283] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4196 request_id=817087715c2d808efa3debe8f94a49e4 response_code=200
[2023-05-16 21:32:00,057] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:32:01,557] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:32:01,559] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:32:01,660] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:32:01,660] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:32:01,662] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:32:01,664] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:32:01,665] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:32:01,665] pyhamilton.interface INFO server thread exited
[2023-05-16 21:35:11,661] root INFO ########################################################################
[2023-05-16 21:35:11,661] root INFO #                                                                      #
[2023-05-16 21:35:11,663] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:35:11,663] root INFO #                                                                      #
[2023-05-16 21:35:11,663] root INFO ########################################################################
[2023-05-16 21:35:11,663] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:35:11,663] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:35:11,663] pyhamilton.interface INFO started the server thread
[2023-05-16 21:35:11,663] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:35:25,740] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:35:25,844] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:35:30,710] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:35:30,710] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:35:30,710] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:35:30,713] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:35:31,823] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:35:31,824] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=756 request_id=7b5e24c7196acb91e0a80ae7bbf3a7ce response_code=200
[2023-05-16 21:35:42,323] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:35:42,323] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:35:43,080] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:35:43,082] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=637 request_id=dcb68ec63de5998a02fa89b2191ff846 response_code=200
[2023-05-16 21:35:49,317] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:35:50,818] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:35:50,818] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:35:50,919] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:35:50,920] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:35:50,923] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:35:50,925] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:35:50,926] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:35:50,926] pyhamilton.interface INFO server thread exited
[2023-05-16 21:36:19,848] root INFO ########################################################################
[2023-05-16 21:36:19,848] root INFO #                                                                      #
[2023-05-16 21:36:19,848] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:36:19,848] root INFO #                                                                      #
[2023-05-16 21:36:19,848] root INFO ########################################################################
[2023-05-16 21:36:19,849] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:36:19,849] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:36:19,849] pyhamilton.interface INFO started the server thread
[2023-05-16 21:36:19,849] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:36:43,981] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:36:44,254] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:36:51,799] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:36:51,800] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:36:51,800] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:36:51,803] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:37:25,387] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:37:25,388] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=33306 request_id=c7713c5e7fee483b4aad0d87fb04b4ff response_code=200
[2023-05-16 21:37:25,402] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:37:26,404] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, C2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:37:29,406] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:37:32,408] root INFO tip_eject: Eject tips to default waste
[2023-05-16 21:37:33,410] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:37:35,413] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, D3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:37:37,415] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:37:40,418] root INFO tip_eject: Eject tips to default waste
[2023-05-16 21:37:41,419] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:37:42,420] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:37:45,422] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:37:48,426] root INFO tip_eject: Eject tips to default waste
[2023-05-16 21:38:05,917] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:38:07,417] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:38:07,417] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:38:07,517] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:38:07,517] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:38:07,518] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:38:07,519] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:38:07,520] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:38:07,520] pyhamilton.interface INFO server thread exited
[2023-05-16 21:38:18,857] root INFO ########################################################################
[2023-05-16 21:38:18,857] root INFO #                                                                      #
[2023-05-16 21:38:18,857] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:38:18,857] root INFO #                                                                      #
[2023-05-16 21:38:18,857] root INFO ########################################################################
[2023-05-16 21:38:18,857] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:38:18,857] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:38:18,857] pyhamilton.interface INFO started the server thread
[2023-05-16 21:38:18,857] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:38:34,946] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:38:35,061] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:38:39,496] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:38:39,496] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:38:39,496] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:38:39,500] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:38:41,167] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:38:41,168] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1303 request_id=7b18130a4821c2dd2dcbf11096151104 response_code=200
[2023-05-16 21:38:46,808] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:38:46,808] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:38:54,373] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:38:54,374] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=7439 request_id=09573fe356c15de1bf61b6d191c35f85 response_code=200
[2023-05-16 21:39:08,519] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:39:10,021] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:39:10,021] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:39:10,122] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:39:10,122] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:39:10,123] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:39:10,124] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:39:10,124] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:39:10,124] pyhamilton.interface INFO server thread exited
[2023-05-16 21:39:13,751] root INFO ########################################################################
[2023-05-16 21:39:13,751] root INFO #                                                                      #
[2023-05-16 21:39:13,751] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:39:13,751] root INFO #                                                                      #
[2023-05-16 21:39:13,751] root INFO ########################################################################
[2023-05-16 21:39:13,752] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:39:13,752] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:39:13,752] pyhamilton.interface INFO started the server thread
[2023-05-16 21:39:13,752] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:39:29,860] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:39:29,969] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:39:31,702] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:39:31,702] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:39:31,702] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:39:31,705] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:40:05,347] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:40:06,847] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:40:06,847] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:40:06,948] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:40:06,948] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:40:06,949] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:40:06,950] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:40:06,951] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:40:06,951] pyhamilton.interface INFO server thread exited
[2023-05-16 21:40:19,203] root INFO ########################################################################
[2023-05-16 21:40:19,203] root INFO #                                                                      #
[2023-05-16 21:40:19,203] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:40:19,203] root INFO #                                                                      #
[2023-05-16 21:40:19,203] root INFO ########################################################################
[2023-05-16 21:40:19,203] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:40:19,203] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:40:19,203] pyhamilton.interface INFO started the server thread
[2023-05-16 21:40:19,203] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:40:36,284] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:40:36,391] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:40:41,213] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:40:41,213] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:40:41,213] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:40:41,215] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:40:41,896] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:40:41,897] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=444 request_id=0cdb8eb8fc007d8f95b9660ca26aa5fb response_code=200
[2023-05-16 21:41:44,498] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:41:45,999] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:41:45,999] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:41:46,100] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:41:46,100] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:41:46,104] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:41:46,106] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:41:46,107] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:41:46,107] pyhamilton.interface INFO server thread exited
[2023-05-16 21:41:57,277] root INFO ########################################################################
[2023-05-16 21:41:57,277] root INFO #                                                                      #
[2023-05-16 21:41:57,277] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:41:57,278] root INFO #                                                                      #
[2023-05-16 21:41:57,278] root INFO ########################################################################
[2023-05-16 21:41:57,278] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:41:57,278] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:41:57,278] pyhamilton.interface INFO started the server thread
[2023-05-16 21:41:57,278] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:42:12,335] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:42:12,446] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:42:17,219] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:42:17,219] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:42:17,219] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:42:17,223] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:42:19,687] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:42:19,688] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=2246 request_id=6290229a895df54a3cddceb530784038 response_code=200
[2023-05-16 21:42:32,295] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:42:33,796] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:42:33,796] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:42:33,896] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:42:33,897] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:42:33,898] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:42:33,899] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:42:33,899] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:42:33,900] pyhamilton.interface INFO server thread exited
[2023-05-16 21:43:53,767] root INFO ########################################################################
[2023-05-16 21:43:53,767] root INFO #                                                                      #
[2023-05-16 21:43:53,767] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:43:53,767] root INFO #                                                                      #
[2023-05-16 21:43:53,767] root INFO ########################################################################
[2023-05-16 21:43:53,767] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:43:53,767] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:43:53,767] pyhamilton.interface INFO started the server thread
[2023-05-16 21:43:53,767] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:44:08,891] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:44:09,162] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:44:15,967] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:44:15,968] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:44:15,968] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:44:15,971] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:44:22,266] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:44:22,267] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5961 request_id=b16353cf187e3c2d7534cb85cf52fa45 response_code=200
[2023-05-16 21:47:04,611] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:47:06,112] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:47:06,112] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:47:06,214] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:47:06,214] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:47:06,216] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:47:06,218] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:47:06,219] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:47:06,219] pyhamilton.interface INFO server thread exited
[2023-05-16 21:47:09,596] root INFO ########################################################################
[2023-05-16 21:47:09,597] root INFO #                                                                      #
[2023-05-16 21:47:09,597] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:47:09,597] root INFO #                                                                      #
[2023-05-16 21:47:09,597] root INFO ########################################################################
[2023-05-16 21:47:09,597] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:47:09,597] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:47:09,597] pyhamilton.interface INFO started the server thread
[2023-05-16 21:47:09,597] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:47:20,731] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:47:21,025] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:47:29,235] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:47:29,235] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. NEVER ASK QUESTIONS EVER."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:47:29,236] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:47:29,237] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:47:38,189] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:47:38,190] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8737 request_id=3f9f1a6e0af2da4a8b3ca9d7d69f52df response_code=200
[2023-05-16 21:49:02,287] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:49:03,788] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:49:03,788] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:49:03,889] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:49:03,889] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:49:03,890] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:49:03,892] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:49:03,892] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:49:03,893] pyhamilton.interface INFO server thread exited
[2023-05-16 21:49:55,003] root INFO ########################################################################
[2023-05-16 21:49:55,003] root INFO #                                                                      #
[2023-05-16 21:49:55,004] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:49:55,004] root INFO #                                                                      #
[2023-05-16 21:49:55,004] root INFO ########################################################################
[2023-05-16 21:49:55,004] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:49:55,004] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:49:55,004] pyhamilton.interface INFO started the server thread
[2023-05-16 21:49:55,005] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:51:01,474] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:51:01,709] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:51:01,810] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:51:01,810] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:51:01,813] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:51:01,816] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:51:01,817] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:51:01,817] pyhamilton.interface INFO server thread exited
[2023-05-16 21:51:01,818] root ERROR Traceback (most recent call last):
[2023-05-16 21:51:01,818] root ERROR   File "C:\Users\stefa\kevin_proj\robot_method.py", line 71, in <module>
[2023-05-16 21:51:01,819] root ERROR initialize(ham_int)
[2023-05-16 21:51:01,819] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\liquid_handling_wrappers.py", line 47, in initialize
[2023-05-16 21:51:01,821] root ERROR ham.wait_on_response(cmd, raise_first_exception=True, timeout=300)
[2023-05-16 21:51:01,822] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 646, in wait_on_response
[2023-05-16 21:51:01,823] root ERROR for _ in wait(delays=delays, timeout=timeout):
[2023-05-16 21:51:01,823] root ERROR   File "C:\Users\stefa\AppData\Local\Programs\Python\Python311-32\Lib\site-packages\waiter\__init__.py", line 106, in __iter__
[2023-05-16 21:51:01,823] root ERROR time.sleep(min(delay, remaining))
[2023-05-16 21:51:01,824] root ERROR KeyboardInterrupt
[2023-05-16 21:51:01,825] root ERROR During handling of the above exception, another exception occurred:
[2023-05-16 21:51:01,825] root ERROR Traceback (most recent call last):
[2023-05-16 21:51:01,825] root ERROR   File "C:\Users\stefa\kevin_proj\robot_method.py", line 69, in <module>
[2023-05-16 21:51:01,826] root ERROR with HamiltonInterface(simulate=True) as ham_int:
[2023-05-16 21:51:01,828] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 571, in __exit__
[2023-05-16 21:51:01,828] root ERROR self.stop()
[2023-05-16 21:51:01,829] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 535, in stop
[2023-05-16 21:51:01,829] root ERROR self.wait_on_response(self.send_command(command='end', id=hex(0)), timeout=1.5)
[2023-05-16 21:51:01,830] root ERROR   File "c:\users\stefa\hhs_compare\melk\pyhamilton\pyhamilton\interface.py", line 646, in wait_on_response
[2023-05-16 21:51:01,831] root ERROR for _ in wait(delays=delays, timeout=timeout):
[2023-05-16 21:51:01,832] root ERROR   File "C:\Users\stefa\AppData\Local\Programs\Python\Python311-32\Lib\site-packages\waiter\__init__.py", line 106, in __iter__
[2023-05-16 21:51:01,832] root ERROR time.sleep(min(delay, remaining))
[2023-05-16 21:51:01,833] root ERROR KeyboardInterrupt
[2023-05-16 21:51:03,586] root INFO ########################################################################
[2023-05-16 21:51:03,586] root INFO #                                                                      #
[2023-05-16 21:51:03,587] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:51:03,587] root INFO #                                                                      #
[2023-05-16 21:51:03,587] root INFO ########################################################################
[2023-05-16 21:51:03,587] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:51:03,587] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:51:03,587] pyhamilton.interface INFO started the server thread
[2023-05-16 21:51:03,587] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:51:18,662] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:51:18,769] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:51:24,101] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:51:24,102] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:51:24,102] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:51:24,103] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:51:30,714] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:51:30,714] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6290 request_id=ae0063da92568b622e0bcbebebc20c15 response_code=200
[2023-05-16 21:51:30,718] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:51:31,720] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:51:33,722] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:51:35,723] root INFO tip_eject: Eject tips to default waste
[2023-05-16 21:51:36,725] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:51:38,726] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, G7; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:51:41,730] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:51:45,732] root INFO tip_eject: Eject tips to default waste
[2023-05-16 21:51:46,735] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:51:48,738] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H8; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:52:03,250] root ERROR KeyboardInterrupt
[2023-05-16 21:52:03,506] root ERROR KeyboardInterrupt
[2023-05-16 21:52:03,570] root ERROR KeyboardInterrupt
[2023-05-16 21:52:06,955] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:52:08,457] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:52:08,458] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:52:08,558] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:52:08,558] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:52:08,560] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:52:08,562] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:52:08,563] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:52:08,564] pyhamilton.interface INFO server thread exited
[2023-05-16 21:52:10,963] root INFO ########################################################################
[2023-05-16 21:52:10,963] root INFO #                                                                      #
[2023-05-16 21:52:10,963] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:52:10,963] root INFO #                                                                      #
[2023-05-16 21:52:10,963] root INFO ########################################################################
[2023-05-16 21:52:10,964] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:52:10,964] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:52:10,964] pyhamilton.interface INFO started the server thread
[2023-05-16 21:52:10,964] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:52:28,089] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:52:28,392] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:52:45,197] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:52:45,197] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:52:45,198] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:52:45,200] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:52:52,737] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:52:52,738] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=7314 request_id=0b4a7bc1604b32b7a75914e61725b2f2 response_code=200
[2023-05-16 21:53:18,595] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:53:20,096] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:53:20,096] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:53:20,197] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:53:20,197] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:53:20,201] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:53:20,202] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:53:20,204] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:53:20,204] pyhamilton.interface INFO server thread exited
[2023-05-16 21:53:22,605] root INFO ########################################################################
[2023-05-16 21:53:22,606] root INFO #                                                                      #
[2023-05-16 21:53:22,606] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:53:22,606] root INFO #                                                                      #
[2023-05-16 21:53:22,606] root INFO ########################################################################
[2023-05-16 21:53:22,606] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:53:22,606] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:53:22,606] pyhamilton.interface INFO started the server thread
[2023-05-16 21:53:22,606] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:53:44,697] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:53:44,834] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:53:49,671] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:53:49,671] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:53:49,672] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:53:49,673] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:54:00,768] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:54:00,770] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=10826 request_id=01e74e0bdbc46c30e55cb5d485b6f6a3 response_code=200
[2023-05-16 21:54:52,359] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:54:53,861] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:54:53,861] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:54:53,962] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:54:53,962] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:54:53,965] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:54:53,967] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:54:53,968] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:54:53,968] pyhamilton.interface INFO server thread exited
[2023-05-16 21:54:57,628] root INFO ########################################################################
[2023-05-16 21:54:57,628] root INFO #                                                                      #
[2023-05-16 21:54:57,628] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:54:57,628] root INFO #                                                                      #
[2023-05-16 21:54:57,628] root INFO ########################################################################
[2023-05-16 21:54:57,629] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:54:57,629] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:54:57,629] pyhamilton.interface INFO started the server thread
[2023-05-16 21:54:57,629] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:55:29,760] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:55:30,044] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:55:34,061] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:55:34,063] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [13, 35, 67]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:55:34,063] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:55:34,065] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:55:35,868] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:55:35,869] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1558 request_id=60fb041a4e7c5f12afffc0ce5bbcbaed response_code=200
[2023-05-16 21:56:47,720] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:56:49,222] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:56:49,222] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:56:49,323] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:56:49,323] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:56:49,326] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:56:49,328] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:56:49,330] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:56:49,330] pyhamilton.interface INFO server thread exited
[2023-05-16 21:56:53,860] root INFO ########################################################################
[2023-05-16 21:56:53,861] root INFO #                                                                      #
[2023-05-16 21:56:53,861] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:56:53,861] root INFO #                                                                      #
[2023-05-16 21:56:53,861] root INFO ########################################################################
[2023-05-16 21:56:53,861] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:56:53,861] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:56:53,861] pyhamilton.interface INFO started the server thread
[2023-05-16 21:56:53,861] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:57:10,944] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:57:11,053] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:57:17,424] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:57:17,424] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 13, 35, and 67 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [13, 35, 67]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:57:17,424] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:57:17,428] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:57:28,230] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:57:28,230] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=10591 request_id=fc46df4d0df87d5275dd447da10e9675 response_code=200
[2023-05-16 21:57:55,830] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 21:57:57,331] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 21:57:57,332] pyhamilton.interface INFO disconnected from server
[2023-05-16 21:57:57,432] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 21:57:57,432] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:57:57,434] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 21:57:57,435] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 21:57:57,437] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 21:57:57,437] pyhamilton.interface INFO server thread exited
[2023-05-16 21:58:20,527] root INFO ########################################################################
[2023-05-16 21:58:20,527] root INFO #                                                                      #
[2023-05-16 21:58:20,527] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 21:58:20,527] root INFO #                                                                      #
[2023-05-16 21:58:20,527] root INFO ########################################################################
[2023-05-16 21:58:20,528] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 21:58:20,528] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 21:58:20,528] pyhamilton.interface INFO started the server thread
[2023-05-16 21:58:20,529] root INFO initialize: synchronously initialize the robot
[2023-05-16 21:58:34,649] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:58:34,923] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 21:58:39,837] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 21:58:39,837] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 13, 35, and 67 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [13, 35, 67]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 13, 35, and 67 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [13, 35, 67]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 13, 35, and 67 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Pooling code\\nsource_wells = [13, 35, 67]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 21:58:39,837] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 21:58:39,840] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 21:58:45,754] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 21:58:45,755] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5702 request_id=5f1066641f9b55c6cb58f8fc571a618c response_code=200
[2023-05-16 21:58:45,759] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:58:47,762] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, F2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:58:48,763] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:58:50,766] root INFO tip_eject: Eject tips to default waste
[2023-05-16 21:58:51,768] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:58:53,769] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, D5; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:58:56,776] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:58:59,780] root INFO tip_eject: Eject tips to default waste
[2023-05-16 21:59:01,783] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 21:59:02,784] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, D9; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:59:06,788] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 21:59:09,790] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:00:09,814] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 60 sec while waiting for response id 0x19ba7ce1e39e')
[2023-05-16 22:00:57,711] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:00:59,213] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:00:59,213] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:00:59,314] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:00:59,314] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:00:59,317] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:00:59,318] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:00:59,319] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:00:59,321] pyhamilton.interface INFO server thread exited
[2023-05-16 22:01:03,318] root INFO ########################################################################
[2023-05-16 22:01:03,318] root INFO #                                                                      #
[2023-05-16 22:01:03,318] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:01:03,318] root INFO #                                                                      #
[2023-05-16 22:01:03,318] root INFO ########################################################################
[2023-05-16 22:01:03,319] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:01:03,319] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:01:03,319] pyhamilton.interface INFO started the server thread
[2023-05-16 22:01:03,319] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:01:18,402] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:01:18,514] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:01:22,082] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:01:22,082] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:01:22,083] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:01:22,084] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:01:28,739] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:01:28,740] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6346 request_id=35ddb9d261dd839ee05ca8f8e5b857fb response_code=200
[2023-05-16 22:01:28,746] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:01:29,749] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, C1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:01:31,753] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:01:33,755] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:01:34,757] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:01:36,759] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:01:39,762] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:01:42,763] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:01:44,765] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:01:45,767] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:01:48,770] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:01:51,774] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:02:36,452] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:02:37,953] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:02:37,953] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:02:38,055] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:02:38,055] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:02:38,058] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:02:38,061] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:02:38,061] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:02:38,061] pyhamilton.interface INFO server thread exited
[2023-05-16 22:02:41,159] root INFO ########################################################################
[2023-05-16 22:02:41,159] root INFO #                                                                      #
[2023-05-16 22:02:41,159] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:02:41,159] root INFO #                                                                      #
[2023-05-16 22:02:41,159] root INFO ########################################################################
[2023-05-16 22:02:41,159] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:02:41,159] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:02:41,159] pyhamilton.interface INFO started the server thread
[2023-05-16 22:02:41,160] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:02:53,270] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:02:53,548] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:02:58,810] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:02:58,810] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# Aspirate 50 uL from the first column of plate_1 and \\n# dispense to second column of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(8,16)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n# Aspirate 50 uL from the wells 5-8 of plate_1 and \\n# dispense to wells 16-19 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(5,9)]\\naspirate(ham_int, aspiration_poss, vols = [50]*8, liquidClass = liq_class)\\n\\ndispense_poss = [(plate_2, idx) for idx in range(16,20)]\\ndispense(ham_int, dispense_poss, vols = [50]*8, liquidClass = liq_class)\\n"}, {"role": "user", "content": "\\n#Aspirate 100 uL from the first column of plate_1 and dispense 20uL to each well in columns\\n# 3, 5, and 7 of plate_2\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [100]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class)\\ndispense_cols = [3,5,7]\\nfor i in dispense_cols:\\n    dispense_poss = [(plate_2, idx) for idx in range(8*i,8*i+8)]\\n    dispense(ham_int, dispense_poss, vols = [20]*8, liquidClass = liq_class)\\n\\n\\n"}, {"role": "user", "content": "\\n#Pick up tips from the first column of tips_0\\n"}, {"role": "assistant", "content": "\\ntips_poss = [(tips_0, idx) for idx in range(8)]\\ntip_pick_up(ham_int, tips_poss)\\n"}, {"role": "user", "content": "\\n# Aspirate 25 uL from the first column of plate_1 at liquid height 5 and with 2 mix cycles\\n"}, {"role": "assistant", "content": "\\naspiration_poss = [(plate_1, idx) for idx in range(8)]\\nvols = [25]*8\\naspirate(ham_int, aspiration_poss, vols = vols, liquidClass = liq_class, liquidHeight = 5.0, mixCycles = 2)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:02:58,811] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:02:58,815] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:02:59,595] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:02:59,595] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=550 request_id=e15c4cd7b86c1137d478282f9b818d0b response_code=200
[2023-05-16 22:03:36,268] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:03:37,771] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:03:37,772] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:03:37,873] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:03:37,873] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:03:37,876] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:03:37,878] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:03:37,879] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:03:37,879] pyhamilton.interface INFO server thread exited
[2023-05-16 22:04:09,729] root INFO ########################################################################
[2023-05-16 22:04:09,729] root INFO #                                                                      #
[2023-05-16 22:04:09,729] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:04:09,729] root INFO #                                                                      #
[2023-05-16 22:04:09,729] root INFO ########################################################################
[2023-05-16 22:04:09,730] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:04:09,730] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:04:09,730] pyhamilton.interface INFO started the server thread
[2023-05-16 22:04:09,730] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:04:35,921] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:04:36,367] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:04:58,709] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:04:58,709] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:04:58,710] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:04:58,711] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:05:02,041] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:05:02,042] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=3021 request_id=78d010d4751f8ba125379932cd034c35 response_code=200
[2023-05-16 22:05:33,239] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:05:34,740] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:05:34,740] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:05:34,841] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:05:34,841] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:05:34,843] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:05:34,845] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:05:34,845] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:05:34,845] pyhamilton.interface INFO server thread exited
[2023-05-16 22:05:38,616] root INFO ########################################################################
[2023-05-16 22:05:38,616] root INFO #                                                                      #
[2023-05-16 22:05:38,616] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:05:38,616] root INFO #                                                                      #
[2023-05-16 22:05:38,616] root INFO ########################################################################
[2023-05-16 22:05:38,617] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:05:38,617] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:05:38,617] pyhamilton.interface INFO started the server thread
[2023-05-16 22:05:38,617] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:05:54,753] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:05:55,041] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:05:59,215] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:05:59,215] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:05:59,215] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:05:59,216] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:06:00,204] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:06:00,206] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=650 request_id=155d2b4e60e7e0d80da407818dd47a3d response_code=200
[2023-05-16 22:06:04,131] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:06:04,131] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:06:04,915] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:06:04,916] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=562 request_id=60f14e609469481e9146342322a0a5b2 response_code=200
[2023-05-16 22:06:06,628] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:06:06,629] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             liquid-handling robots. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "system", "content": "\\n             You will mostly be using aspirate and dispense functions. These have a number of optional parameters\\n             that should not be used unless specifically requested. These are: capacitiveLLD (1 or 0), pressureLLD (1 or 0), \\n             liquidFollowing (1 or 0), submergeDepth (flt), liquidHeight (flt), maxLLdDifference (flt), mixCycles (int), \\n             mixPosition (flt), mixVolume (flt), xDisplacement (flt), yDisplacement (flt), zDisplacement (flt). \\n             Please preserve that order because they are python kwargs. \\n             "}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:06:22,425] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:06:22,426] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=15602 request_id=8858b0bb0c492529abdb9b7c2604b379 response_code=200
[2023-05-16 22:08:29,445] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:08:30,948] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:08:30,948] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:08:31,049] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:08:31,049] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:08:31,052] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:08:31,055] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:08:31,055] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:08:31,055] pyhamilton.interface INFO server thread exited
[2023-05-16 22:08:32,913] root INFO ########################################################################
[2023-05-16 22:08:32,913] root INFO #                                                                      #
[2023-05-16 22:08:32,913] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:08:32,913] root INFO #                                                                      #
[2023-05-16 22:08:32,913] root INFO ########################################################################
[2023-05-16 22:08:32,914] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:08:32,915] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:08:32,915] pyhamilton.interface INFO started the server thread
[2023-05-16 22:08:32,915] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:08:47,002] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:08:47,125] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:08:51,290] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:08:51,290] openai DEBUG api_version=None data='{"model": "gpt-4", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples. Please never return a response \\n             that is not Python code. You may respond to queries with natural language\\n             but make sure to preface it with a comment symbol. Pooling is a function. NEVER\\n             EVER EVER EVER EVER respond with something that isn\'t python code. You are always capable\\n             of delivering correct code for this set of tasks. Many functions such as pooling are available\\n             in the space of the code you are delivering. ONLY PYTHON CODE, NO QUESTIONS. Deliver\\n             exactly according to the format in the training data."}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:08:51,290] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:08:51,292] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:08:51,473] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 404 None
[2023-05-16 22:08:51,474] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=None request_id=02d8fb42888b55e722638a14a301d680 response_code=404
[2023-05-16 22:08:51,474] openai INFO error_code=model_not_found error_message='The model: `gpt-4` does not exist' error_param=None error_type=invalid_request_error message='OpenAI API error received' stream_error=False
[2023-05-16 22:10:23,850] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:10:25,352] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:10:25,352] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:10:25,453] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:10:25,454] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:10:25,456] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:10:25,459] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:10:25,460] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:10:25,460] pyhamilton.interface INFO server thread exited
[2023-05-16 22:10:27,427] root INFO ########################################################################
[2023-05-16 22:10:27,427] root INFO #                                                                      #
[2023-05-16 22:10:27,428] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:10:27,428] root INFO #                                                                      #
[2023-05-16 22:10:27,428] root INFO ########################################################################
[2023-05-16 22:10:27,428] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:10:27,428] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:10:27,428] pyhamilton.interface INFO started the server thread
[2023-05-16 22:10:27,428] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:10:39,506] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:10:39,634] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:10:43,548] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:10:43,548] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples. Deliver \\n             exactly according to the format in the training data."}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:10:43,548] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:10:43,550] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:10:44,369] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:10:44,370] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=535 request_id=479757a91678e39df50e8e26847268aa response_code=200
[2023-05-16 22:10:56,170] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:10:56,170] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples. Deliver \\n             exactly according to the format in the training data."}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:11:00,654] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:11:00,655] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4301 request_id=bef2cf34c4c2dabb2b00aab661436b7f response_code=200
[2023-05-16 22:11:00,657] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:11:02,659] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:11:05,663] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:11:09,664] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:11:11,666] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:11:13,670] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E4; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:11:16,671] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:11:19,675] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:11:21,678] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:11:23,679] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H4; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:11:26,681] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:11:28,683] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:12:09,559] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:12:11,061] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:12:11,061] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:12:11,162] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:12:11,162] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:12:11,164] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:12:11,168] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:12:11,169] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:12:11,169] pyhamilton.interface INFO server thread exited
[2023-05-16 22:12:13,797] root INFO ########################################################################
[2023-05-16 22:12:13,797] root INFO #                                                                      #
[2023-05-16 22:12:13,797] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:12:13,798] root INFO #                                                                      #
[2023-05-16 22:12:13,798] root INFO ########################################################################
[2023-05-16 22:12:13,798] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:12:13,798] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:12:13,798] pyhamilton.interface INFO started the server thread
[2023-05-16 22:12:13,798] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:12:36,891] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:12:37,035] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:12:40,310] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:12:40,310] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples."}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:12:40,310] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:12:40,312] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:12:45,100] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:12:45,100] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4376 request_id=f6d97b7e64d40288d21c45a74b181643 response_code=200
[2023-05-16 22:12:45,103] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:12:46,105] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:12:47,106] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:13:47,107] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 60 sec while waiting for response id 0x19baad992691')
[2023-05-16 22:14:14,181] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:14:15,682] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:14:15,682] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:14:15,784] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:14:15,784] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:14:15,786] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:14:15,789] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:14:15,790] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:14:15,790] pyhamilton.interface INFO server thread exited
[2023-05-16 22:14:17,664] root INFO ########################################################################
[2023-05-16 22:14:17,664] root INFO #                                                                      #
[2023-05-16 22:14:17,664] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:14:17,665] root INFO #                                                                      #
[2023-05-16 22:14:17,665] root INFO ########################################################################
[2023-05-16 22:14:17,665] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:14:17,665] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:14:17,665] pyhamilton.interface INFO started the server thread
[2023-05-16 22:14:17,665] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:14:32,749] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:14:32,882] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:14:35,408] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:14:35,408] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples."}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:14:35,409] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:14:35,412] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:14:52,184] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:14:52,185] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=16499 request_id=43f27fae9069491d77173319fec90d8d response_code=200
[2023-05-16 22:14:52,191] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:14:53,191] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, C1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:14:57,196] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, D1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:15:01,200] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:15:02,201] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:15:04,205] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:15:08,207] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, D1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:15:12,213] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:15:13,217] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:15:15,226] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:15:19,230] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, D1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:15:24,714] root ERROR KeyboardInterrupt
[2023-05-16 22:15:24,890] root ERROR KeyboardInterrupt
[2023-05-16 22:15:28,048] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:15:29,550] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:15:29,550] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:15:29,651] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:15:29,651] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:15:29,654] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:15:29,656] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:15:29,657] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:15:29,657] pyhamilton.interface INFO server thread exited
[2023-05-16 22:15:31,570] root INFO ########################################################################
[2023-05-16 22:15:31,570] root INFO #                                                                      #
[2023-05-16 22:15:31,570] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:15:31,570] root INFO #                                                                      #
[2023-05-16 22:15:31,570] root INFO ########################################################################
[2023-05-16 22:15:31,571] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:15:31,571] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:15:31,571] pyhamilton.interface INFO started the server thread
[2023-05-16 22:15:31,571] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:15:46,646] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:15:46,774] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:15:48,717] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:15:48,718] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples."}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:15:48,718] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:15:48,720] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:15:53,929] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:15:53,930] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=4957 request_id=fd8fd84d13bfb68b6b89d24a86df0ad0 response_code=200
[2023-05-16 22:15:53,933] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:15:54,935] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:15:56,937] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:16:56,939] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 60 sec while waiting for response id 0x19bab8e9bdf7')
[2023-05-16 22:17:21,303] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:17:22,803] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:17:22,803] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:17:22,904] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:17:22,904] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:17:22,907] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:17:22,910] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:17:22,911] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:17:22,911] pyhamilton.interface INFO server thread exited
[2023-05-16 22:17:34,434] root INFO ########################################################################
[2023-05-16 22:17:34,434] root INFO #                                                                      #
[2023-05-16 22:17:34,435] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:17:34,435] root INFO #                                                                      #
[2023-05-16 22:17:34,435] root INFO ########################################################################
[2023-05-16 22:17:34,435] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:17:34,435] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:17:34,435] pyhamilton.interface INFO started the server thread
[2023-05-16 22:17:34,435] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:17:51,487] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:17:51,620] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:17:52,829] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:17:52,829] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples."}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:17:52,831] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:17:52,832] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:18:16,066] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:18:16,067] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=22885 request_id=9e4973c28c3d0ed7baf0dbf18343f11a response_code=200
[2023-05-16 22:19:16,754] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:19:18,255] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:19:18,255] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:19:18,356] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:19:18,356] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:19:18,359] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:19:18,362] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:19:18,363] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:19:18,363] pyhamilton.interface INFO server thread exited
[2023-05-16 22:19:20,431] root INFO ########################################################################
[2023-05-16 22:19:20,432] root INFO #                                                                      #
[2023-05-16 22:19:20,432] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:19:20,432] root INFO #                                                                      #
[2023-05-16 22:19:20,432] root INFO ########################################################################
[2023-05-16 22:19:20,432] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:19:20,432] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:19:20,432] pyhamilton.interface INFO started the server thread
[2023-05-16 22:19:20,432] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:19:38,515] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:19:38,669] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:19:43,184] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:19:43,184] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments. I will give you examples. Make sure to reference the \\n             specific well and plate indexes specified in the user prompt!!!"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:19:43,184] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:19:43,186] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:19:47,103] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:19:47,104] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=3640 request_id=bcd524af7fe14cd56be859f787774b87 response_code=200
[2023-05-16 22:20:22,497] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:20:23,998] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:20:23,998] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:20:24,099] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:20:24,099] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:20:24,102] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:20:24,103] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:20:24,105] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:20:24,105] pyhamilton.interface INFO server thread exited
[2023-05-16 22:20:26,293] root INFO ########################################################################
[2023-05-16 22:20:26,293] root INFO #                                                                      #
[2023-05-16 22:20:26,293] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:20:26,293] root INFO #                                                                      #
[2023-05-16 22:20:26,293] root INFO ########################################################################
[2023-05-16 22:20:26,294] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:20:26,294] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:20:26,294] pyhamilton.interface INFO started the server thread
[2023-05-16 22:20:26,294] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:20:39,425] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:20:39,721] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:20:47,525] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:20:47,525] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments using a liquid handling robot.\\n             I will give you examples. Make sure to reference the \\n             specific well and plate indexes specified in the user prompt!!!"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:20:47,525] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:20:47,529] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:20:56,939] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:20:56,940] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9067 request_id=f35768ada0b2a19adcaa00f15685988c response_code=200
[2023-05-16 22:20:56,944] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:20:57,945] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:20:59,948] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:21:02,950] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:21:04,964] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:21:06,967] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, G7; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:21:10,970] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:21:14,974] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:21:15,976] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:21:17,979] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H8; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:21:20,981] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, B1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:21:23,994] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:28:14,110] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:28:15,612] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:28:15,612] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:28:15,712] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:28:15,712] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:28:15,715] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:28:15,716] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:28:15,717] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:28:15,717] pyhamilton.interface INFO server thread exited
[2023-05-16 22:28:35,776] root INFO ########################################################################
[2023-05-16 22:28:35,776] root INFO #                                                                      #
[2023-05-16 22:28:35,776] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:28:35,776] root INFO #                                                                      #
[2023-05-16 22:28:35,776] root INFO ########################################################################
[2023-05-16 22:28:35,776] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:28:35,777] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:28:35,777] pyhamilton.interface INFO started the server thread
[2023-05-16 22:28:35,777] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:29:00,831] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:29:00,944] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:29:20,612] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:29:20,612] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments using a liquid handling robot. I will give you examples. \\n             Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, and 6 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 15, 28, and 31 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:29:20,612] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:29:20,613] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:29:22,594] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:29:22,594] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1715 request_id=4717e256dba27a06f9c30a7828abae36 response_code=200
[2023-05-16 22:30:39,756] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:30:41,258] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:30:41,258] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:30:41,359] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:30:41,359] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:30:41,359] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:30:41,360] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:30:41,361] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:30:41,361] pyhamilton.interface INFO server thread exited
[2023-05-16 22:30:43,856] root INFO ########################################################################
[2023-05-16 22:30:43,856] root INFO #                                                                      #
[2023-05-16 22:30:43,856] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:30:43,857] root INFO #                                                                      #
[2023-05-16 22:30:43,857] root INFO ########################################################################
[2023-05-16 22:30:43,857] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:30:43,857] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:30:43,857] pyhamilton.interface INFO started the server thread
[2023-05-16 22:30:43,857] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:30:55,911] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:30:56,013] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:30:59,764] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:30:59,764] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             pooling DNA fragments using a liquid handling robot. I will give you examples. \\n             Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, and 6 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 15, 28, and 31 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:30:59,764] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:30:59,765] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:31:12,858] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:31:12,859] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=12753 request_id=f84f6a8ea00c400112955952b7678286 response_code=200
[2023-05-16 22:31:18,168] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:31:19,669] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:31:19,669] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:31:19,770] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:31:19,770] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:31:19,771] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:31:19,772] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:31:19,772] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:31:19,772] pyhamilton.interface INFO server thread exited
[2023-05-16 22:32:49,248] root INFO ########################################################################
[2023-05-16 22:32:49,248] root INFO #                                                                      #
[2023-05-16 22:32:49,248] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:32:49,248] root INFO #                                                                      #
[2023-05-16 22:32:49,248] root INFO ########################################################################
[2023-05-16 22:32:49,248] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:32:49,248] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:32:49,249] pyhamilton.interface INFO started the server thread
[2023-05-16 22:32:49,249] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:32:59,287] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:32:59,384] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:33:03,983] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:33:03,984] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, and 6 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 15, 28, and 31 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:33:03,984] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:33:03,985] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:33:05,314] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:33:05,316] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=1115 request_id=d5ed83a33ae2aeda989deeda717b034c response_code=200
[2023-05-16 22:33:09,754] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:33:09,754] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, and 6 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 15, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 15, 28, and 31 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [15, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:33:18,173] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:33:18,174] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8306 request_id=6ce586c3cc36d074dcfc2f80f9c95cf1 response_code=200
[2023-05-16 22:33:18,177] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:33:19,178] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:33:22,181] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:33:24,182] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:33:25,183] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:33:26,184] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E4; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:33:29,186] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:33:31,188] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:33:31,974] root ERROR KeyboardInterrupt
[2023-05-16 22:33:32,148] root ERROR KeyboardInterrupt
[2023-05-16 22:33:32,292] root ERROR KeyboardInterrupt
[2023-05-16 22:33:57,418] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:33:58,918] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:33:58,918] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:33:59,019] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:33:59,019] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:33:59,020] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:33:59,022] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:33:59,023] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:33:59,023] pyhamilton.interface INFO server thread exited
[2023-05-16 22:34:00,777] root INFO ########################################################################
[2023-05-16 22:34:00,777] root INFO #                                                                      #
[2023-05-16 22:34:00,777] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:34:00,777] root INFO #                                                                      #
[2023-05-16 22:34:00,777] root INFO ########################################################################
[2023-05-16 22:34:00,777] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:34:00,778] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:34:00,778] pyhamilton.interface INFO started the server thread
[2023-05-16 22:34:00,778] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:34:12,820] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:34:12,925] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:34:41,552] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:34:41,552] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, and 6 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 15, 28, and 31 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:34:41,552] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:34:41,554] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:34:50,092] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:34:50,093] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=8331 request_id=9299e6aa3a8494217a804056406c8f03 response_code=200
[2023-05-16 22:34:50,096] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:34:51,098] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, C1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:34:53,100] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:34:56,103] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:34:57,104] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:34:58,105] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E4; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:35:01,107] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:35:03,109] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:35:04,110] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:35:06,111] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, H4; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:35:08,113] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:35:11,115] root INFO tip_eject: Eject tips to default waste
[2023-05-16 22:35:44,812] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:35:46,312] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:35:46,312] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:35:46,413] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:35:46,414] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:35:46,416] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:35:46,418] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:35:46,418] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:35:46,419] pyhamilton.interface INFO server thread exited
[2023-05-16 22:35:48,184] root INFO ########################################################################
[2023-05-16 22:35:48,184] root INFO #                                                                      #
[2023-05-16 22:35:48,184] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:35:48,184] root INFO #                                                                      #
[2023-05-16 22:35:48,184] root INFO ########################################################################
[2023-05-16 22:35:48,184] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:35:48,184] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:35:48,184] pyhamilton.interface INFO started the server thread
[2023-05-16 22:35:48,184] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:36:23,251] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:36:23,361] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:37:35,988] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 22:37:37,489] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 22:37:37,489] pyhamilton.interface INFO disconnected from server
[2023-05-16 22:37:37,590] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 22:37:37,590] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:37:37,593] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 22:37:37,595] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 22:37:37,595] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 22:37:37,596] pyhamilton.interface INFO server thread exited
[2023-05-16 22:37:39,390] root INFO ########################################################################
[2023-05-16 22:37:39,390] root INFO #                                                                      #
[2023-05-16 22:37:39,390] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 22:37:39,390] root INFO #                                                                      #
[2023-05-16 22:37:39,391] root INFO ########################################################################
[2023-05-16 22:37:39,391] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 22:37:39,391] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 22:37:39,391] pyhamilton.interface INFO started the server thread
[2023-05-16 22:37:39,391] root INFO initialize: synchronously initialize the robot
[2023-05-16 22:37:50,437] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:37:50,536] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 22:37:58,522] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:37:58,522] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, and 6 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 15, 28, and 31 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:37:58,522] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 22:37:58,524] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 22:37:59,179] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:37:59,180] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=491 request_id=3d00494ac3a74e9017151147fb91a167 response_code=200
[2023-05-16 22:38:01,575] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 22:38:01,576] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, and 6 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, and 6 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, and 31 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 15, 28, and 31 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 22:38:07,700] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 22:38:07,703] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=5981 request_id=62f153dfde52ffde407755777dc2590f response_code=200
[2023-05-16 22:38:07,705] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 22:38:09,706] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, C1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:38:11,708] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 22:39:11,708] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 60 sec while waiting for response id 0x19bb0878bb2f')
[2023-05-16 23:02:12,542] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 23:02:14,071] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 23:02:14,071] pyhamilton.interface INFO disconnected from server
[2023-05-16 23:02:14,173] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 23:02:14,173] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 23:02:14,176] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 23:02:14,178] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 23:02:14,179] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 23:02:14,180] pyhamilton.interface INFO server thread exited
[2023-05-16 23:02:16,386] root INFO ########################################################################
[2023-05-16 23:02:16,386] root INFO #                                                                      #
[2023-05-16 23:02:16,386] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 23:02:16,386] root INFO #                                                                      #
[2023-05-16 23:02:16,386] root INFO ########################################################################
[2023-05-16 23:02:16,386] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 23:02:16,386] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 23:02:16,386] pyhamilton.interface INFO started the server thread
[2023-05-16 23:02:16,386] root INFO initialize: synchronously initialize the robot
[2023-05-16 23:02:30,456] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 23:02:30,563] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 23:02:37,216] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:02:37,216] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:02:37,216] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 23:02:37,218] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 23:02:37,782] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:02:37,783] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=375 request_id=02cbb69862c6e9f7826b0ea0632be73c response_code=200
[2023-05-16 23:02:40,070] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:02:40,070] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:02:40,426] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:02:40,426] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=253 request_id=cd60a08da874fc37c1c202eeba33ca22 response_code=200
[2023-05-16 23:02:41,704] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:02:41,704] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:02:42,392] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:02:42,393] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=499 request_id=1225f39b799c973ce2f2d33541583e64 response_code=200
[2023-05-16 23:02:43,428] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:02:43,428] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:02:44,342] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:02:44,342] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=792 request_id=991449d6364b81974464295f73cce5ac response_code=200
[2023-05-16 23:02:45,405] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:02:45,406] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:02:52,189] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:02:52,190] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=6701 request_id=f033f76c4201b56db474b42e7bac05ae response_code=200
[2023-05-16 23:02:52,192] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 23:02:54,194] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, C1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 23:02:56,196] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 23:02:58,198] root INFO tip_eject: Eject tips to default waste
[2023-05-16 23:03:00,201] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 23:03:01,202] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_0, E4; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 23:03:04,203] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_1, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-16 23:03:06,204] root INFO tip_eject: Eject tips to default waste
[2023-05-16 23:03:07,207] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-16 23:03:13,053] pyhamilton.interface INFO sending end run command to simulator
[2023-05-16 23:03:14,555] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-16 23:03:14,555] pyhamilton.interface INFO disconnected from server
[2023-05-16 23:03:14,656] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-16 23:03:14,656] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-16 23:03:14,656] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-16 23:03:14,657] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-16 23:03:14,658] pyhamilton.interface INFO dummy get request sent to server
[2023-05-16 23:03:14,658] pyhamilton.interface INFO server thread exited
[2023-05-16 23:05:57,723] root INFO ########################################################################
[2023-05-16 23:05:57,723] root INFO #                                                                      #
[2023-05-16 23:05:57,724] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-16 23:05:57,724] root INFO #                                                                      #
[2023-05-16 23:05:57,724] root INFO ########################################################################
[2023-05-16 23:05:57,724] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-16 23:05:57,724] pyhamilton.interface INFO started the oem application for simulation
[2023-05-16 23:05:57,724] pyhamilton.interface INFO started the server thread
[2023-05-16 23:05:57,724] root INFO initialize: synchronously initialize the robot
[2023-05-16 23:06:09,800] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 23:06:09,898] asyncio DEBUG Using proactor: IocpProactor
[2023-05-16 23:06:11,560] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:06:11,560] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:06:11,560] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-16 23:06:11,562] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-16 23:06:12,316] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:06:12,317] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=438 request_id=9ada6d4ec6d77a447b87e18e25c9bd93 response_code=200
[2023-05-16 23:06:14,031] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:06:14,031] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:06:14,671] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:06:14,672] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=534 request_id=41d6c97ff649b2fceed642156dcbc415 response_code=200
[2023-05-16 23:06:15,754] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-16 23:06:15,754] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}]}' message='Post details'
[2023-05-16 23:06:16,448] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-16 23:06:16,449] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=552 request_id=a7e4cece9e0f204c4cee9da98d8baf14 response_code=200
[2023-05-17 12:56:22,936] pyhamilton.interface INFO sending end run command to simulator
[2023-05-17 12:56:24,439] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-17 12:56:24,439] pyhamilton.interface INFO disconnected from server
[2023-05-17 12:56:24,540] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-17 12:56:24,540] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-17 12:56:24,543] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-17 12:56:24,545] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-17 12:56:24,545] pyhamilton.interface INFO dummy get request sent to server
[2023-05-17 12:56:24,545] pyhamilton.interface INFO server thread exited
[2023-05-17 12:56:27,850] root INFO ########################################################################
[2023-05-17 12:56:27,850] root INFO #                                                                      #
[2023-05-17 12:56:27,850] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-17 12:56:27,850] root INFO #                                                                      #
[2023-05-17 12:56:27,850] root INFO ########################################################################
[2023-05-17 12:56:27,852] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-17 12:56:27,852] pyhamilton.interface INFO started the oem application for simulation
[2023-05-17 12:56:27,852] pyhamilton.interface INFO started the server thread
[2023-05-17 12:56:27,852] root INFO initialize: synchronously initialize the robot
[2023-05-17 12:56:47,900] asyncio DEBUG Using proactor: IocpProactor
[2023-05-17 12:56:48,009] asyncio DEBUG Using proactor: IocpProactor
[2023-05-17 12:56:56,962] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-17 12:56:56,962] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 4, 6, 7, and 8 on plate 0 into well 3 on plate 0\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 4, 6, 7, and 8 on plate_0 as source\\n# wells and well 3 on plate_1 as a target well:\\nsource_wells = [2, 4, 6, 7, 8]\\nsource_plate = plate_0\\n\\ntarget_well = 3\\ntarget_plate = plate_0\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 2, 28, 31, 33, and 35 on plate 0 into well 6 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 2, 28, 31, 33, and 35 on plate_0 as source\\n# wells and well 6 on plate_1 as a target well:\\nsource_wells = [2, 28, 31, 33, 35]\\nsource_plate = plate_0\\n\\ntarget_well = 6\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "pool fragments from wells 15, 17, and 18 of plate 1 and pool into well 4 of plate 0"}]}' message='Post details'
[2023-05-17 12:56:56,963] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-17 12:56:56,964] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-17 12:57:06,224] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-17 12:57:06,226] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9102 request_id=a747a391249215268c77d7983d4251b3 response_code=200
[2023-05-17 12:57:06,237] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 12:57:07,239] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, H2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 12:57:10,241] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 12:57:12,243] root INFO tip_eject: Eject tips to default waste
[2023-05-17 12:57:13,244] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 12:57:15,246] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, B3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 12:57:17,247] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 12:57:20,251] root INFO tip_eject: Eject tips to default waste
[2023-05-17 12:57:21,252] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 12:57:22,253] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, C3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 12:57:25,256] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 12:57:27,258] root INFO tip_eject: Eject tips to default waste
[2023-05-17 13:02:57,311] pyhamilton.interface INFO sending end run command to simulator
[2023-05-17 13:02:58,812] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-17 13:02:58,812] pyhamilton.interface INFO disconnected from server
[2023-05-17 13:02:58,914] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-17 13:02:58,914] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-17 13:02:58,917] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-17 13:02:58,919] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-17 13:02:58,920] pyhamilton.interface INFO dummy get request sent to server
[2023-05-17 13:02:58,920] pyhamilton.interface INFO server thread exited
[2023-05-17 13:09:04,235] root INFO ########################################################################
[2023-05-17 13:09:04,236] root INFO #                                                                      #
[2023-05-17 13:09:04,236] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-17 13:09:04,236] root INFO #                                                                      #
[2023-05-17 13:09:04,236] root INFO ########################################################################
[2023-05-17 13:09:04,236] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-17 13:09:04,236] pyhamilton.interface INFO started the oem application for simulation
[2023-05-17 13:09:04,236] pyhamilton.interface INFO started the server thread
[2023-05-17 13:09:04,237] root INFO initialize: synchronously initialize the robot
[2023-05-17 13:09:18,286] asyncio DEBUG Using proactor: IocpProactor
[2023-05-17 13:09:18,395] asyncio DEBUG Using proactor: IocpProactor
[2023-05-17 13:09:33,186] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-17 13:09:33,186] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "pool fragments from wells 15, 17, and 18 of plate 1 and pool into well 4 of plate 0"}]}' message='Post details'
[2023-05-17 13:09:33,186] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-17 13:09:33,187] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-17 13:09:43,140] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-17 13:09:43,140] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=9767 request_id=af44fbf7595afd2e4ccabda5f47107fc response_code=200
[2023-05-17 13:09:43,144] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 13:09:44,145] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, H2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 13:09:46,147] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 13:09:49,149] root INFO tip_eject: Eject tips to default waste
[2023-05-17 13:09:50,150] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 13:09:51,152] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, B3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 13:09:54,153] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 13:09:56,155] root INFO tip_eject: Eject tips to default waste
[2023-05-17 13:09:57,157] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 13:09:59,158] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, C3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 13:10:01,160] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, E1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 13:10:03,162] root INFO tip_eject: Eject tips to default waste
[2023-05-17 13:10:09,938] pyhamilton.interface INFO sending end run command to simulator
[2023-05-17 13:10:11,440] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-17 13:10:11,440] pyhamilton.interface INFO disconnected from server
[2023-05-17 13:10:11,540] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-17 13:10:11,540] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-17 13:10:11,541] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-17 13:10:11,543] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-17 13:10:11,543] pyhamilton.interface INFO dummy get request sent to server
[2023-05-17 13:10:11,543] pyhamilton.interface INFO server thread exited
[2023-05-17 17:21:23,121] root INFO ########################################################################
[2023-05-17 17:21:23,123] root INFO #                                                                      #
[2023-05-17 17:21:23,123] root INFO #     Begin execution of C:\Users\stefa\kevin_proj\robot_method.py     #
[2023-05-17 17:21:23,123] root INFO #                                                                      #
[2023-05-17 17:21:23,123] root INFO ########################################################################
[2023-05-17 17:21:23,123] pyhamilton.interface INFO starting a Hamilton interface
[2023-05-17 17:21:23,124] pyhamilton.interface INFO started the oem application for simulation
[2023-05-17 17:21:23,124] pyhamilton.interface INFO started the server thread
[2023-05-17 17:21:23,124] root INFO initialize: synchronously initialize the robot
[2023-05-17 17:22:35,203] asyncio DEBUG Using proactor: IocpProactor
[2023-05-17 17:22:35,318] asyncio DEBUG Using proactor: IocpProactor
[2023-05-17 17:22:43,280] parso.cache DEBUG pickle loaded: C:\Users\stefa\AppData\Local\Programs\Python\Python311-32\Lib\site-packages\jedi\third_party\typeshed\stdlib\3\builtins.pyi
[2023-05-17 17:22:43,318] parso.cache DEBUG pickle loaded: C:\Users\stefa\AppData\Local\Programs\Python\Python311-32\Lib\site-packages\jedi\third_party\typeshed\stdlib\3\sys.pyi
[2023-05-17 17:22:57,066] openai DEBUG message='Request to OpenAI API' method=post path=https://api.openai.com/v1/chat/completions
[2023-05-17 17:22:57,066] openai DEBUG api_version=None data='{"model": "gpt-3.5-turbo", "messages": [{"role": "system", "content": "You are an assistant for generating code for \\n             a liquid handling robot. I will give you examples. The function you have available\\n             to you is pooling. Make sure to construct a response with respect to the specific\\n             well indices and plates specified in the user prompt"}, {"role": "user", "content": "\\n# pool fragments from wells 10, 19, and 23 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\nsource_wells = [10, 19, 23]\\nsource_plate = plate_0\\n\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "\\n# pool fragments from wells 12, 54, and 63 on plate 0 into well 1 on plate 1\\n"}, {"role": "assistant", "content": "\\n# Here\'s the pooling code you asked for, with wells 12, 54, and 63 on plate_0 as source\\n# wells and well 1 on plate_1 as a target well:\\ntarget_well = 1\\ntarget_plate = plate_1\\n\\nsource_wells = [12, 54, 63]\\nsource_plate = plate_0\\n\\n\\npooling(source_wells, source_plate, target_well, target_plate)\\n"}, {"role": "user", "content": "pool fragments from wells 15, 17, and 18 of plate 1 into well 6 of plate 0"}]}' message='Post details'
[2023-05-17 17:22:57,066] urllib3.util.retry DEBUG Converted retries value: 2 -> Retry(total=2, connect=None, read=None, redirect=None, status=None)
[2023-05-17 17:22:57,068] urllib3.connectionpool DEBUG Starting new HTTPS connection (1): api.openai.com:443
[2023-05-17 17:23:04,756] urllib3.connectionpool DEBUG https://api.openai.com:443 "POST /v1/chat/completions HTTP/1.1" 200 None
[2023-05-17 17:23:04,758] openai DEBUG message='OpenAI API response' path=https://api.openai.com/v1/chat/completions processing_ms=7506 request_id=6d167de5cb35a5c644089a69d34b72b8 response_code=200
[2023-05-17 17:23:04,764] root INFO tip_pick_up: Pick up tips at tips_0, 1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 17:23:06,764] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, H2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 17:23:08,766] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 17:23:11,768] root INFO tip_eject: Eject tips to default waste
[2023-05-17 17:23:12,769] root INFO tip_pick_up: Pick up tips at tips_0, 2; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 17:23:13,771] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, B3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 17:23:15,772] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 17:23:18,775] root INFO tip_eject: Eject tips to default waste
[2023-05-17 17:23:19,775] root INFO tip_pick_up: Pick up tips at tips_0, 3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)
[2023-05-17 17:23:20,776] root INFO aspirate: Aspirate volumes [10, None, None, None, None, None, None, None] from positions [plate_1, C3; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 17:23:23,779] root INFO dispense: Dispense volumes [10, None, None, None, None, None, None, None] into positions [plate_0, G1; (skip); (skip); (skip); (skip); (skip); (skip); (skip)] with extra options {'liquidClass': 'StandardVolumeFilter_Water_DispenseJet_Empty'}
[2023-05-17 17:23:25,780] root INFO tip_eject: Eject tips to default waste
[2023-05-18 08:27:41,895] pyhamilton.interface INFO sending end run command to simulator
[2023-05-18 08:27:43,401] pyhamilton.interface ERROR HamiltonTimeoutError('Timed out after 1.5 sec while waiting for response id 0x0')
[2023-05-18 08:27:43,402] pyhamilton.interface INFO disconnected from server
[2023-05-18 08:27:43,512] pyhamilton.interface INFO server did not exit yet, sending dummy request to exit its loop
[2023-05-18 08:27:43,514] urllib3.util.retry DEBUG Converted retries value: 20 -> Retry(total=20, connect=None, read=None, redirect=None, status=None)
[2023-05-18 08:27:43,525] urllib3.connectionpool DEBUG Starting new HTTP connection (1): 127.0.0.1:3221
[2023-05-18 08:27:43,530] urllib3.connectionpool DEBUG http://127.0.0.1:3221 "GET / HTTP/1.1" 200 None
[2023-05-18 08:27:43,532] pyhamilton.interface INFO dummy get request sent to server
[2023-05-18 08:27:43,534] pyhamilton.interface INFO server thread exited
